<!DOCTYPE html>
<html>
<head>
    <title>AI Teaching Assistant - Image Chat</title>
    <style>
        .chat-container {
            max-width: 1200px;
            margin: 2rem auto;
            height: calc(100vh - 150px);
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 0 1rem;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 1rem;
        }

        .chat-input-wrapper {
            background-color: #ffffff;
            border-radius: 25px;
            padding: 0.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            border: 1px solid #e0e0e0;
        }

        .chat-input {
            flex: 1;
            border: none;
            padding: 0.8rem 1rem;
            font-size: 1rem;
            outline: none;
            background: transparent;
        }

        .send-button {
            background-color: transparent;
            border: none;
            padding: 0.5rem 1rem;
            cursor: pointer;
            color: #666;
        }

        /* Message styles */
        .message {
            margin: 1rem 0;
            padding: 1rem;
            border-radius: 10px;
            max-width: 70%;
        }

        .user-message {
            background-color: #6c5ce7;
            color: white;
            margin-left: auto;
        }

        .bot-message {
            background-color: #F0F0F0;
            color: black;
        }

        /* Image specific styles */
        .image-container {
            position: relative;
            display: inline-block;
            margin: 10px 0;
        }

        .image-message {
            max-width: 512px;
            margin: 10px 0;
            border-radius: 10px;
        }

        .download-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.3s;
        }

        .download-btn:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }

        .download-icon {
            width: 16px;
            height: 16px;
            fill: currentColor;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will appear here -->
        </div>

        <div class="chat-input-wrapper">
            <input type="text" 
                   class="chat-input" 
                   placeholder="Describe the image you want to generate..." 
                   id="messageInput">
            <button class="send-button" id="sendButton">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" fill="currentColor"/>
                </svg>
            </button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        let messageHistory = [];

        // Clear any existing messages when connecting
        chatMessages.innerHTML = '';

        function addMessage(sender, content, isImage = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;

            if (isImage) {
                const imageContainer = document.createElement('div');
                imageContainer.className = 'image-container';

                const img = document.createElement('img');
                img.src = content;
                img.className = 'image-message';

                const downloadBtn = document.createElement('button');
                downloadBtn.className = 'download-btn';
                downloadBtn.innerHTML = `
                    <svg class="download-icon" viewBox="0 0 24 24">
                        <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                    </svg>
                    Download
                `;
                
                downloadBtn.onclick = async () => {
                    try {
                        // Use our proxy endpoint instead of fetching directly
                        const response = await fetch('/image-chat/api/download-image', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ imageUrl: content })
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to download image');
                        }

                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `generated-image-${Date.now()}.png`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    } catch (error) {
                        console.error('Error downloading image:', error);
                        alert('Failed to download image');
                    }
                };

                imageContainer.appendChild(img);
                imageContainer.appendChild(downloadBtn);
                messageDiv.appendChild(imageContainer);
            } else {
                messageDiv.textContent = content;
            }

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Store in history
            messageHistory.push({ sender, content, isImage });
        }

        async function handleSendMessage() {
            const prompt = messageInput.value.trim();
            if (!prompt) return;

            // Add user message
            addMessage('user', prompt);
            messageInput.value = '';

            // Show loading state
            addMessage('bot', 'Generating image...');

            try {
                const response = await fetch('/image-chat/api/generate-image', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt })
                });
                
                const data = await response.json();
                
                // Remove loading message
                chatMessages.removeChild(chatMessages.lastChild);
                
                if (data.error) {
                    // Display the error message in the chat
                    addMessage('bot', data.error);
                } else {
                    // Display the generated image
                    addMessage('bot', data.imageUrl, true);
                }
                
            } catch (error) {
                console.error('Error:', error);
                addMessage('bot', 'Sorry, there was an error generating the image.');
            }
        }

        sendButton.addEventListener('click', handleSendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });
    </script>
</body>
</html> 